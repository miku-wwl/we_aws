# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: macaulayfamous
# "service" is the name of this project. This will also be added to your AWS resource names.
service: orderService

plugins:
  - serverless-step-functions

provider:
  name: aws
  runtime: nodejs22.x
  environment:
    DYNAMO_TABLE: Orders
    SQS_QUEUE_URL: https://sqs.us-east-1.amazonaws.com/051826707630/OrderQueue
    PAYPAL_CLIENT_ID: 'AR784BPCyKl0lckMgfOzBe1Hw_g0WJ6FAyoh5AI5l2XTv8lJ43lZ1PMDgfjnSUxlgD2R8M1k5Zd7aNEK'
    PAYPAL_SECRET: 'ENiuI9ClN6RNA5y5lZHV9ifWAAsmESPt8eil13vypy6Hkie9I5ZYUl2_a_gOPI4e2Gr21WoxC7U7XBoe'
    
  httpApi:
    authorizers:
      myCognitoAuth:
        identitySource: $request.header.Authorization #Extract JWT token from Authorization
        #header(used for validation)
        issuerUrl: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_SsyQSPvdy
        #url of your Cognito user pool(Needed to verify tokens).
        audience:
          - aap64h0meb92breoc51annp1h
          #Cognito App Client ID(ensures tokens come from the right app).
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - states:StartExecution
        - ses:SendEmail
      Resource: 
        - Fn::GetAtt: [OrdersTable, Arn] 
        - Fn::GetAtt: [OrderQueue, Arn] 
        - arn:aws:ses:us-east-1:051826707630:identity/macaulayfamous@gmail.com
        - arn:aws:states:us-east-1:051826707630:stateMachine:OrderProcessingStateMachine
resources:
  Resources:
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Orders
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH   
    OrderQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: OrderQueue         
functions:
  createPayment:
    handler: handlers/paymentHandler.createPayment
    events:
      - httpApi:
          path: /create-payment
          method: post

  paypalSuccess:
    handler: handlers/paymentHandler.paypalSuccess
    events:
      - httpApi:
          path: /paypal-success
          method: get
  verifyPayment:
    handler: handlers/paymentHandler.verifyPayment
    events:
      - httpApi:
          path: /verify-payment
          method: post
  paypalCancel:
    handler: handlers/paymentHandler.paypalCancel
    events:
      - httpApi:
          path: /paypal-cancel
          method: get

# functions:
#   placeOrder:
#     handler: handlers/placeOrder.placeOrder
#     environment:
#       STEP_FUNCTION_ARN:
#         Ref: OrderProcessingStateMachine
#     events:
#       - httpApi:
#           path: /create-order
#           method: post
#           authorizer:
#             name: myCognitoAuth
#   processOrder:
#      handler: handlers/processOrder.processOrder
#      events:
#        - sqs:
#            arn:
#              Fn::GetAtt: [OrderQueue, Arn] 
#   updateOrderStatus:
#      handler: handlers/updateOrderStatus.handler


# stepFunctions: #Start defining Step Functions
#   stateMachines: #Define list of state machines
#     OrderProcessingStateMachine: #this is the name of your state  machine
#       name: OrderProcessingStateMachine  #AWS name for the Step Function
#       definition: #The actual structure (state transitions) of the step function
#         Comment: "Order processing with status update" #Just a comment to describe what this state machine does
#         StartAt: UpdateStatusToProcessing
#         States: 
#           UpdateStatusToProcessing:
#             Type: Task
#             Resource:
#               Fn::GetAtt: [updateOrderStatus, Arn]
#             Next: NotifyUser
#           NotifyUser:
#             Type: Pass #This is dummy/pass-through step  (does noting, usefull)  
#             Result: "User Notified"
#             End: true #Marks the end of the state machine   

